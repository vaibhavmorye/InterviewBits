class MergeSort {
    void mergeSort(int arr[], int l, int r)
    {
        while(l <= r)
        {
            int mid = (l+r)/2;
            mergeSort(arr, l, m);
            mergeSort(arr, m+1, r);

            merge(arr, l, m, r);
        }
    }

    void merge(int arr[], int l, int m, int r)
    {
        int n1 = m - l + 1;
        int n2 = r - m ;

        int L[] = new int[n1];
        int R[] = new int[n2];

        for(int i = 0; i < n1; i++)
            L[i] = arr[l + i];
        for(int i = 0; i < n1; i++)
            R[i] = arr[m + 1 + i];

        int k = l;
        int i = 0, j =0;
        while(i < n1 || j < n2)
        {
            if(i < n1 && j < n2)
            {
                if(L[i] <= R[j])
                {
                    arr[k] = L[i];
                    i++;
                }
                else if(L[i] >= R[j]) // this condition is not neccesary at all but present due to clear the situation
                {
                    arr[k] = R[j];
                    j++;
                }
                k++;
            }
            else
            {
                if(i < n1)
                {
                    arr[k] = L[i];
                    i++;
                    k++;
                }
                if(j < n2)
                {
                    arr[k] = R[j];
                    j++;
                    k++;
                }
            }
        }
    }

    static void print(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            printf(arr[i] + " ");
        printf();
    }


    public static void main(String args[])
    {
        int arr[] = {12, 11, 13, 5, 6, 7};

        printf("Given Array");
        print(arr);

        MergeSort obj = new MergeSort();
        obj.sort(arr, 0, arr.length-1);

        printf("\nSorted array");
        print(arr);
    }
}