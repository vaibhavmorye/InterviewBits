/*
 j = 2  j >=0 && arr[2] > 5
{11 12 13 5 6}
arr[3] = arr[2];
j = j-1 = 1 
j >=0 && arr[1] > 5
{11 12 13 13 6}
arr[2] = arr[1];
j = j-1 = 0 j >=0 && arr[0] > 5
{11 12 12 13 6}
arr[1] = arr[0]
j = 0-1 = -1 
{11 11 12 13 6}
j = j-1 = 0 (fail)j >=0 && arr[0] > 5
arr[j+1] = key
arr[-1+1] = arr[0] =  5;
{5 11 12 13 6}

j = 3 j >= 0 && arr[3] > key arr[4] = 6
{5 11 12 13 6}
arr[j+1] = arr[4] = arr[3] = 13
j = 3-1 = 2
{5 11 12 13 13}
arr[j+1] = arr[3] = arr[2] = 12
 j = 2-1 = 1
 {5 11 12 12 13}
 arr[2] = arr[1] = 11
 j = 1-1 =0
 {5 11 11 12 13}
 j+1 = 0 + 1 = 1
 arr[1] = key;
 {5 6 11 12 13}
 */
class InsertionSort
{
    void insertionSort(int arr[])
    {
        int i = 0;
        int j = 0;
        int key = 0;
        int n = arr.length;
        for (i = 1; i < n; i++)
        {
            key = arr[i];
            j = i-1;

            while(j >= 0 && arr[j] > key)
            {
                arr[j+1] = arr[j];
                j = j-1;
            }
            arr[j+1] = key;
        }
    }

    void print(int arr[])
    {
        for(int i = 0; i < arr.length; i++ )
        {
            System.out.print(arr[i]+" ");
        }
		System.out.println();
    }

    public static void main(String args[])
    {
        int arr[] = {12, 11, 13, 5, 6};

        InsertionSort obj = new InsertionSort();
        obj.insertionSort(arr);

        obj.print(arr);
    }
}
