/*
Largest subarray with equal number of 0s and 1s
http://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/
*
* O(n*n) approch 
*/
class LargestSubArray{
int findSubArray(int arr[], int n)
{
	int sum = 0;
	int maxSize = -1;
	int startIndex = 0;
	int endIndex = 0;
	
	for(int i = 0; i < n-1; i++)
	{
		sum = (arr[i] == 0)? -1 : 1;
		for(int j = i+1; j < n; j++)
		{
			if(arr[j] == 0)
			 sum += -1;
			 else
			 sum += 1;
			 
			 if(sum == 0 && maxSize < j - i +1 )
			 {
				maxSize = j - i + 1;
				startIndex = i;
			 }
		}
	}
	
	endIndex = startIndex + maxSize - 1;
	if(maxSize == -1 )
		System.out.println("No such array");
	else 
		System.out.println(startIndex+" to "+endIndex);
	return maxSize; 
}

 public static void main(String[] args) 
    {
        LargestSubArray sub;
        sub = new LargestSubArray();
        int arr[] = {1, 0, 0, 1, 0, 1, 1};
        int size = arr.length;
 
        sub.findSubArray(arr, size);
    }
}
